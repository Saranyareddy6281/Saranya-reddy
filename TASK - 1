/* Installing pip */
pip install pandas numpy scikit-learn matplotlib seaborn
/* Importing libraries */
iimport pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing
/* Use fetch_california_housing instead */

/* Load the California Housing dataset */
housing = fetch_california_housing() 

/* Convert to DataFrame */
df = pd.DataFrame(housing.data, columns=housing.feature_names)
df['PRICE'] = housing.target

print(df.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

/* Split data into features (X) and target (y) */
X = df.drop('PRICE', axis=1)
y = df['PRICE']

/* Split the data into training and testing sets */
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

/*Standardize the features */
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

/*Initialize and train the model */
model = LinearRegression()
model.fit(X_train_scaled, y_train)

/* Make predictions */
y_pred = model.predict(X_test_scaled)

/*Evaluate the model */
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")
import matplotlib.pyplot as plt

/* Plot actual vs predicted values */
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Housing Prices')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')  # 45-degree line
plt.show()

import pandas as pd
import numpy as np
from sklearn.datasets import fetch_california_housing # Use fetch_california_housing instead

/* Load the California Housing dataset */
housing = fetch_california_housing() 

/*Convert to DataFrame */
df = pd.DataFrame(housing.data, columns=housing.feature_names)
df['PRICE'] = housing.target

print(df.head())
